---
- name: Install Postfix and related software
  apt:
    name:
      - postfix
      - postfix-pcre
      - opendkim
      - opendkim-tools
- name: Create postfix cert dir
  file:
    state: directory
    path: /etc/postfix/ssl
  notify: Reload postfix
- name: Create cert symlinks
  file:
    state: link
    dest: /etc/postfix/ssl/{{ item.dest }}
    src: '{{ item.src }}'
    force: true
  loop:
    - {dest: cert.pem, src: '{{ postfix_cert_path }}'}
    - {dest: privkey.pem, src: '{{ postfix_privkey_path }}'}
  notify: Reload postfix
- name: Create system group for mailbox user
  group:
    name: vmail
    gid: 5000
- name: Create system user to use with virtual mailboxes
  user:
    name: vmail
    password: '*'
    shell: /bin/false
    create_home: false
    uid: 5000
    group: vmail
    home: '{{ postfix_vmail_root_dir }}'
  notify: Reload postfix
- name: Create root directory for virtual mailboxes
  file:
    path: '{{ postfix_vmail_root_dir }}'
    state: directory
    owner: vmail
    group: vmail
    mode: "0750"
- name: Create directory for each of virtual mailbox domains
  file:
    path: '{{ (postfix_vmail_root_dir, item) | path_join }}'
    state: directory
    owner: vmail
    group: vmail
    mode: "0750"
  loop: '{{ postfix_virtual_domains }}'
- name: smtp_sasl_passwd file setup
  block:
    - name: Generate smtp_sasl_passwd file
      copy:
        dest: /etc/postfix/smtp_sasl_passwd
        content: |
          {% for m in postfix_relay_maps %}
          {{ m.mx }} {{ m.login }}:{{ m.password }}
          {% endfor %}
        mode: "0600"
      notify: Reload postfix
    - name: Stat smtp_sasl_passwd file
      stat:
        path: /etc/postfix/smtp_sasl_passwd
      register: s1
    - name: Stat smtp_sasl_passwd.db file
      stat:
        path: /etc/postfix/smtp_sasl_passwd.db
      register: s2
    - name: Process smtp_sasl_passwd file with postmap
      command:
        cmd: postmap /etc/postfix/smtp_sasl_passwd
      when: 'not s2.stat.exists or s1.stat.mtime > s2.stat.mtime'
    - name: Generate relaymap file
      copy:
        dest: /etc/postfix/relaymap
        content: |
          {% for m in postfix_relay_maps %}
          @{{ m.domain }} {{ m.mx }}
          {% endfor %}
      notify: Reload postfix
    - name: Stat relaymap file
      stat:
        path: /etc/postfix/relaymap
      register: s1
    - name: Stat relaymap.db file
      stat:
        path: /etc/postfix/relaymap.db
      register: s2
    - name: Process relaymap file with postmap
      command:
        cmd: postmap /etc/postfix/relaymap
      when: 'not s2.stat.exists or s1.stat.mtime > s2.stat.mtime'
  when: postfix_relay_maps is defined and (postfix_relay_maps | length > 0)
- name: Configure virtual mailboxes
  copy:
    dest: /etc/postfix/vmailbox
    content: |
      {% for v in postfix_vmail_mailboxes %}
      {{ v.recipient }} {{ v.path }}
      {% endfor %}
  notify: Reload postfix
  register: vmailbox_result
- name: Run postmap on virtual mailboxes configuration file
  command:
    cmd: postmap {{ vmailbox_result.copy.dest }}
  when: vmailbox_result.changed
- name: Configure virtual aliases
  copy:
    dest: /etc/postfix/virtual
    content: |
      {% for v in postfix_virtual_aliases %}
      {{ v.alias }} {{ v.recipient }}
      {% endfor %}
  notify: Reload postfix
  register: virtual_alias_result
- name: Run postmap on virtual aliases configuration file
  command:
    cmd: postmap {{ virtual_alias_result.copy.dest }}
  when: virtual_alias_result.changed
- name: Configure smtp header checks file
  copy:
    dest: '{{ postfix_smtp_header_checks_file }}'
    content: |
      /^Received: .*with ESMTPSA/ IGNORE
      /^X-Originating-IP:/ IGNORE
      /^X-Mailer:/ IGNORE
      /^Mime-Version:/ IGNORE
  notify: Reload postfix
- name: Prepare postfix's main.cf
  template:
    dest: /etc/postfix/main.cf
    src: main.cf.j2
    backup: true
  notify: Reload postfix
- name: Prepare opendkim configuration
  template:
    src: opendkim.conf.j2
    dest: /etc/opendkim.conf
    backup: true
  notify: Restart opendkim
- name: Generate opendkim signing key
  shell:
    cmd: >
      opendkim-genkey -s "{{ postfix_opendkim_genkey_selector }}" &&
      chown opendkim:opendkim "{{ postfix_opendkim_genkey_selector }}.private" &&
      chmod 600 "{{ postfix_opendkim_genkey_selector }}.private"
    chdir: /etc/dkimkeys
    creates: /etc/dkimkeys/{{ postfix_opendkim_genkey_selector }}.private
  notify: Restart opendkim
